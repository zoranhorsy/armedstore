import 'dotenv/config';
import axios from 'axios';

const API_URL = 'http://localhost:3000/api';
let authToken = null;
let testProduct = null;
let testLicense = null;

// Fonction utilitaire pour les tests
const test = async (name, fn) => {
  try {
    console.log(`\nüß™ Test: ${name}`);
    await fn();
    console.log('‚úÖ Test r√©ussi');
  } catch (error) {
    console.error('‚ùå Test √©chou√©:', error.response?.data || error.message);
    throw error;
  }
};

// Connexion en tant qu'admin
const loginAsAdmin = async () => {
  const response = await axios.post(`${API_URL}/auth/login`, {
    email: process.env.ADMIN_EMAIL || 'admin@armed.store',
    password: process.env.ADMIN_PASSWORD || 'admin123!'
  });
  authToken = response.data.token;
  console.log('üîë Token admin r√©cup√©r√©');
};

// Cr√©er un produit de test
const createTestProduct = async () => {
  const response = await axios.post(
    `${API_URL}/products`,
    {
      title: 'Test Beat',
      slug: 'test-beat',
      type: 'beat',
      price: 29.99,
      stock: 1,
      is_exclusive: false,
      is_active: true,
      audio_preview_url: 'https://example.com/preview.mp3',
      cover_url: 'https://example.com/cover.jpg',
      download_url: 'https://example.com/download.zip'
    },
    {
      headers: { Authorization: `Bearer ${authToken}` }
    }
  );
  testProduct = response.data;
  console.log('üéµ Produit de test cr√©√©');
};

// Tests des licences
const testCreateLicense = async () => {
  const response = await axios.post(
    `${API_URL}/licenses`,
    {
      product_id: testProduct.id,
      name: 'Licence Standard',
      price: 29.99,
      contract_template_path: '/contracts/standard.pdf',
      download_url: 'https://example.com/download/standard.zip',
      max_sales: 100
    },
    {
      headers: { Authorization: `Bearer ${authToken}` }
    }
  );
  testLicense = response.data;
  console.log('üìÑ Licence cr√©√©e:', testLicense);
};

const testGetLicenses = async () => {
  const response = await axios.get(`${API_URL}/licenses`);
  const licenses = response.data;
  console.log('üìã Liste des licences:', licenses);
  if (!Array.isArray(licenses)) {
    throw new Error('La r√©ponse n\'est pas un tableau');
  }
};

const testGetLicense = async () => {
  const response = await axios.get(`${API_URL}/licenses/${testLicense.id}`);
  const license = response.data;
  console.log('üìÑ D√©tails de la licence:', license);
  if (license.id !== testLicense.id) {
    throw new Error('ID de licence incorrect');
  }
};

const testUpdateLicense = async () => {
  const response = await axios.put(
    `${API_URL}/licenses/${testLicense.id}`,
    {
      name: 'Licence Premium',
      price: 49.99,
      max_sales: 50
    },
    {
      headers: { Authorization: `Bearer ${authToken}` }
    }
  );
  const updatedLicense = response.data;
  console.log('üìÑ Licence mise √† jour:', updatedLicense);
  
  // V√©rifier les mises √† jour
  if (updatedLicense.name !== 'Licence Premium') {
    throw new Error('Le nom n\'a pas √©t√© mis √† jour');
  }
  if (Number(updatedLicense.price) !== 49.99) {
    throw new Error('Le prix n\'a pas √©t√© mis √† jour');
  }
  if (updatedLicense.max_sales !== 50) {
    throw new Error('Le nombre max de ventes n\'a pas √©t√© mis √† jour');
  }
  
  testLicense = updatedLicense;
};

const testDeleteLicense = async () => {
  await axios.delete(
    `${API_URL}/licenses/${testLicense.id}`,
    {
      headers: { Authorization: `Bearer ${authToken}` }
    }
  );
  console.log('üóëÔ∏è Licence supprim√©e');
};

// Ex√©cution des tests
const runTests = async () => {
  try {
    await test('Login Admin', loginAsAdmin);
    await test('Cr√©er Produit Test', createTestProduct);
    await test('Cr√©er Licence', testCreateLicense);
    await test('R√©cup√©rer Liste Licences', testGetLicenses);
    await test('R√©cup√©rer D√©tails Licence', testGetLicense);
    await test('Mettre √† Jour Licence', testUpdateLicense);
    await test('Supprimer Licence', testDeleteLicense);
    
    console.log('\n‚ú® Tous les tests sont pass√©s avec succ√®s !');
  } catch (error) {
    console.error('\n‚ùå Tests √©chou√©s:', error.message);
    process.exit(1);
  }
};

runTests(); 