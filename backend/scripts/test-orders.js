import axios from 'axios';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Configuration
dotenv.config({ path: join(dirname(fileURLToPath(import.meta.url)), '../.env') });

const API_URL = 'http://localhost:3000/api';
let adminToken;
let testProduct;
let testLicense;
let testOrder;

// Fonction utilitaire pour les tests
const test = async (name, fn) => {
  console.log(`\nüß™ Test: ${name}`);
  try {
    await fn();
    console.log('‚úÖ Test r√©ussi');
  } catch (error) {
    console.error('‚ùå Test √©chou√©:', error.response?.data || error.message);
    process.exit(1);
  }
};

// Test de connexion admin
const testAdminLogin = async () => {
  const response = await axios.post(`${API_URL}/auth/login`, {
    email: process.env.ADMIN_EMAIL || 'admin@armed.store',
    password: process.env.ADMIN_PASSWORD || 'admin123!'
  });
  adminToken = response.data.token;
  console.log('üîë Token admin r√©cup√©r√©');
};

// Test de cr√©ation d'un produit
const testCreateProduct = async () => {
  const timestamp = Date.now();
  const response = await axios.post(
    `${API_URL}/products`,
    {
      title: `Test Beat ${timestamp}`,
      slug: `test-beat-${timestamp}`,
      type: 'beat',
      price: 29.99,
      stock: 1,
      is_exclusive: false,
      is_active: true,
      audio_preview_url: 'https://example.com/preview.mp3',
      cover_url: 'https://example.com/cover.jpg',
      download_url: 'https://example.com/download.zip'
    },
    {
      headers: { Authorization: `Bearer ${adminToken}` }
    }
  );
  testProduct = response.data;
  console.log('üéµ Produit de test cr√©√©');
};

// Test de cr√©ation d'une licence
const testCreateLicense = async () => {
  const response = await axios.post(
    `${API_URL}/licenses`,
    {
      product_id: testProduct.id,
      name: 'Licence Standard',
      price: 29.99,
      contract_template_path: '/contracts/standard.pdf',
      download_url: 'https://example.com/download/standard.zip',
      max_sales: 100
    },
    {
      headers: { Authorization: `Bearer ${adminToken}` }
    }
  );
  testLicense = response.data;
  console.log('üìÑ Licence de test cr√©√©e');
};

// Test de cr√©ation d'une commande
const testCreateOrder = async () => {
  const response = await axios.post(
    `${API_URL}/orders`,
    {
      email: 'client@example.com',
      items: [
        {
          product_id: testProduct.id,
          license_id: testLicense.id,
          quantity: 1
        }
      ]
    }
  );
  testOrder = response.data;
  console.log('üõí Commande cr√©√©e:', testOrder);
};

// Test de r√©cup√©ration de la liste des commandes
const testGetOrders = async () => {
  const response = await axios.get(`${API_URL}/orders`, {
    headers: { Authorization: `Bearer ${adminToken}` }
  });
  console.log('üìã Liste des commandes:', response.data);
};

// Test de r√©cup√©ration des d√©tails d'une commande
const testGetOrder = async () => {
  const response = await axios.get(`${API_URL}/orders/${testOrder.id}`, {
    headers: { Authorization: `Bearer ${adminToken}` }
  });
  console.log('üìÑ D√©tails de la commande:', response.data);
};

// Test de mise √† jour du statut d'une commande
const testUpdateOrderStatus = async () => {
  const response = await axios.put(
    `${API_URL}/orders/${testOrder.id}`,
    {
      status: 'completed'
    },
    {
      headers: { Authorization: `Bearer ${adminToken}` }
    }
  );
  console.log('üìù Commande mise √† jour:', response.data);
};

// Test de t√©l√©chargement des fichiers
const testDownloadFiles = async () => {
  const response = await axios.get(`${API_URL}/orders/${testOrder.id}/download`, {
    headers: { Authorization: `Bearer ${adminToken}` }
  });
  console.log('üì¶ Liens de t√©l√©chargement:', response.data);
};

// Test de suppression d'une commande
const testDeleteOrder = async () => {
  await axios.delete(`${API_URL}/orders/${testOrder.id}`, {
    headers: { Authorization: `Bearer ${adminToken}` }
  });
  console.log('üóëÔ∏è Commande supprim√©e');
};

// Ex√©cution des tests
const runTests = async () => {
  try {
    await test('Login Admin', testAdminLogin);
    await test('Cr√©er Produit Test', testCreateProduct);
    await test('Cr√©er Licence Test', testCreateLicense);
    await test('Cr√©er Commande', testCreateOrder);
    await test('R√©cup√©rer Liste Commandes', testGetOrders);
    await test('R√©cup√©rer D√©tails Commande', testGetOrder);
    await test('Mettre √† Jour Statut Commande', testUpdateOrderStatus);
    await test('T√©l√©charger Fichiers', testDownloadFiles);
    await test('Supprimer Commande', testDeleteOrder);

    console.log('\n‚ú® Tous les tests sont pass√©s avec succ√®s !');
  } catch (error) {
    console.error('\n‚ùå Erreur lors de l\'ex√©cution des tests:', error);
    process.exit(1);
  }
};

runTests(); 